Project Title: Laravel Automated Database Extension Installer

Project Overview:
Develop a Laravel package that automates the setup and integration of native PHP database drivers (SQLSRV, Oracle, MySQL, etc.) for both Windows and Linux/macOS environments. The package should use PHP FFI to interface with precompiled native libraries, and provide an interactive CLI installer (via an Artisan command) that guides users through OS selection, environment validation, and any manual configuration steps (such as enabling FFI or updating php.ini).

Requirements:
1. PHP 7.4+ with PHP FFI enabled (the package should check and warn if FFI is disabled).
2. Laravel framework.
3. Composer dependencies:
   - symfony/console (for interactive CLI prompts).
   - guzzlehttp/guzzle (optional, for downloading native libraries if not bundled).
4. Native library binaries for:
   - SQL Server: Windows (e.g. sqlsrv.dll) and, if available, Linux/macOS alternatives or fallback via PDO_ODBC.
   - Oracle: Windows (e.g. oci8.dll) and Linux/macOS (oci8.so).
   - MySQL: (Normally handled by PDO, but include support if needed for completeness).

Plan & Detailed Steps:

1. **Project Setup:**
   - Create a new Laravel package repository.
   - Configure composer.json with required dependencies (symfony/console, guzzlehttp/guzzle).
   - Set up a ServiceProvider to boot the package and register an Artisan command for installation.

2. **Environment Detection:**
   - In the installer code, use PHP’s built-in constants (e.g. PHP_OS_FAMILY) to detect the operating system.
   - Implement an interactive CLI prompt (using Symfony Console) that allows the user to select their OS (Windows, Linux, or macOS) in case auto-detection fails or to override it.
   - Check PHP version and confirm that PHP FFI is enabled using ini_get('ffi.enable'). If not enabled, display a clear error message and instructions on how to enable it in php.ini.

3. **Native Library Management:**
   - Define a folder structure within the package (e.g., resources/native/windows/ and resources/native/linux/) to store the precompiled native libraries.
   - For each supported database driver, determine which native binaries are needed:
       • SQLSRV: Provide sqlsrv.dll for Windows. (For Linux/macOS, either provide alternatives or advise the use of PDO_ODBC.)
       • Oracle: Provide oci8.dll for Windows and oci8.so for Linux/macOS.
       • MySQL: (Usually available via PDO; include if any additional libraries are required.)
   - Decide whether to bundle these binaries with the package or download them on demand from a known URL (using Guzzle).

4. **Interactive Installer (Artisan Command):**
   - Create an Artisan command (e.g., yourpackage:install) that performs the following:
       • Greets the user and explains the installation process.
       • Detects the OS automatically, then prompts the user to confirm or select their OS.
       • Validates that PHP FFI is enabled and warns if it isn’t.
       • Based on the OS selection:
           - For Windows: Copy or download the required DLL files to the PHP extension directory or a designated folder. Inform the user that they may need to update php.ini (e.g., add “extension=sqlsrv.dll”).
           - For Linux/macOS: Copy or download the required .so files similarly, and provide instructions for updating php.ini.
       • Display a checklist of manual steps the user may need to perform:
           - Ensure PHP FFI is enabled (e.g., ffi.enable=preload in php.ini).
           - Add required extension directives (e.g., extension=oci8.so or extension=sqlsrv.dll).
           - Restart the web server or PHP-FPM after changes.
       • Log and output each step so the user can verify what has been done.

5. **FFI Wrapper Implementation:**
   - Create PHP classes that use FFI::cdef() to load the native library function signatures from header definitions.
   - Develop wrapper classes that expose database connection, query, and other operations using these FFI calls, mimicking Laravel’s database driver behavior.
   - Integrate these wrappers into the Laravel Database Manager if possible (or provide a custom connection type).

6. **Testing & Validation:**
   - Write unit tests to cover:
       • Environment detection (OS, PHP version, FFI status).
       • The interactive CLI installer’s logic.
       • The proper copying/downloading of native libraries.
   - Write integration tests that simulate database connections using the FFI wrappers.
   - Manually test on different environments (Windows, Linux, macOS) to ensure compatibility.

7. **Documentation:**
   - Document the package installation, including prerequisites (PHP version, enabling FFI, etc.).
   - Provide a detailed walkthrough of the installer process, explaining the manual steps (editing php.ini, restarting services).
   - Include troubleshooting tips and known issues.

8. **Packaging & Distribution:**
   - Configure Composer post-install scripts to optionally trigger the installer.
   - Ensure that the package is published on Packagist with clear versioning.
   - Set up continuous integration (CI) to build and test the package across supported environments.

Deliverables:
- A Laravel package repository with:
   • A ServiceProvider that bootstraps the package.
   • An Artisan command for installation (yourpackage:install) implementing the interactive installer.
   • FFI wrapper classes for database connectivity.
   • Comprehensive documentation (README) covering setup and manual configuration steps.
   • Unit and integration tests.
